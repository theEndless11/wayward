{"version":3,"sources":["server.js"],"names":["express","require","mongoose","Ably","cors","config","app","port","process","env","PORT","connect","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","console","log","err","Message","use","json","ably","Realtime","key","ABLY_API_KEY","publicChannel","channels","get","subscribe","message","newMessage","text","data","save","req","res","find","sort","timestamp","messages","status","error","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBI,MAAlB,G,CAA4B;;;AAE5B,IAAMC,GAAG,GAAGN,OAAO,EAAnB;AACA,IAAMO,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC,C,CAEA;;AACAR,QAAQ,CAACS,OAAT,CAAiBH,OAAO,CAACC,GAAR,CAAYG,SAA7B,EAAwC;AACpCC,EAAAA,eAAe,EAAE,IADmB;AAEpCC,EAAAA,kBAAkB,EAAE;AAFgB,CAAxC,EAICC,IAJD,CAIM;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAN;AAAA,CAJN,WAKO,UAAAC,GAAG;AAAA,SAAIF,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCC,GAAzC,CAAJ;AAAA,CALV,E,CAOA;;AACA,IAAMC,OAAO,GAAGlB,OAAO,CAAC,WAAD,CAAvB,C,CAAuC;AAEvC;;;AACAK,GAAG,CAACc,GAAJ,CAAQpB,OAAO,CAACqB,IAAR,EAAR;AACAf,GAAG,CAACc,GAAJ,CAAQhB,IAAI,EAAZ,E,CAEA;;AACA,IAAMkB,IAAI,GAAG,IAAInB,IAAI,CAACoB,QAAT,CAAkB;AAAEC,EAAAA,GAAG,EAAEhB,OAAO,CAACC,GAAR,CAAYgB;AAAnB,CAAlB,CAAb;AACA,IAAMC,aAAa,GAAGJ,IAAI,CAACK,QAAL,CAAcC,GAAd,CAAkB,MAAlB,CAAtB,C,CAEA;;AACAF,aAAa,CAACG,SAAd,CAAwB,SAAxB,EAAmC,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,UAAAA,UADyB,GACZ,IAAIZ,OAAJ,CAAY;AAAEa,YAAAA,IAAI,EAAEF,OAAO,CAACG,IAAR,CAAaD;AAArB,WAAZ,CADY;AAAA;AAAA,0CAEzBD,UAAU,CAACG,IAAX,EAFyB;;AAAA;AAG/BlB,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCa,OAAO,CAACG,IAAR,CAAaD,IAAjD;;AAH+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnC,E,CAMA;;AACA1B,GAAG,CAACsB,GAAJ,CAAQ,WAAR,EAAqB,kBAAOO,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEUjB,OAAO,CAACkB,IAAR,GAAeC,IAAf,CAAoB;AAAEC,YAAAA,SAAS,EAAE,CAAC;AAAd,WAApB,CAFV;;AAAA;AAEPC,UAAAA,QAFO;AAGbJ,UAAAA,GAAG,CAACf,IAAJ,CAASmB,QAAT;AAHa;AAAA;;AAAA;AAAA;AAAA;AAKbJ,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEqB,YAAAA,KAAK,EAAE;AAAT,WAArB;;AALa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB,E,CASA;;AACApC,GAAG,CAACc,GAAJ,CAAQpB,OAAO,UAAP,CAAe,QAAf,CAAR,E,CAEA;;AACA2C,MAAM,CAACC,OAAP,GAAiBtC,GAAjB","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Ably = require('ably');\r\nconst cors = require('cors');\r\nrequire('dotenv').config(); // To load environment variables from .env file\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// MongoDB connection using environment variable\r\nmongoose.connect(process.env.MONGO_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n})\r\n.then(() => console.log('MongoDB connected'))\r\n.catch(err => console.log('MongoDB connection error:', err));\r\n\r\n// Import the Message model\r\nconst Message = require('./message');  // Import schema from message.js\r\n\r\n// Use middleware\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Initialize Ably with API Key from environment variable\r\nconst ably = new Ably.Realtime({ key: process.env.ABLY_API_KEY });\r\nconst publicChannel = ably.channels.get('chat');\r\n\r\n// Listen for new messages on the public chat and save them to MongoDB\r\npublicChannel.subscribe('message', async (message) => {\r\n    const newMessage = new Message({ text: message.data.text });\r\n    await newMessage.save();\r\n    console.log('Message saved to DB:', message.data.text);\r\n});\r\n\r\n// API to get all messages from the MongoDB database\r\napp.get('/messages', async (req, res) => {\r\n    try {\r\n        const messages = await Message.find().sort({ timestamp: -1 });\r\n        res.json(messages);\r\n    } catch (err) {\r\n        res.status(500).json({ error: 'Failed to fetch messages' });\r\n    }\r\n});\r\n\r\n// Serve static files (HTML, JS, etc.) - if you have them in a public folder\r\napp.use(express.static('public'));\r\n\r\n// Vercel Serverless Function (For deployment on Vercel)\r\nmodule.exports = app;\r\n"],"file":"server.dev.js"}