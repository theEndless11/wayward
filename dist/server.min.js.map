{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","Ably","port","process","env","PORT","connect","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","err","console","log","Schema","type","String","required","timestamp","Date","default","now","Message","model","messageSchema","text","json","Realtime","key","ABLY_API_KEY","ably","channels","get","publicChannel","subscribe","message","newMessage","regeneratorRuntime","async","_context","prev","next","awrap","save","use","data","stop","find","sort","res","messages","status","error","module","exports","app"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YADnBD,KAAOC,QAAU,QAGjBE,KAAOF,QAAQ,QAFrBA,QAAMC,UAAWD,SACjB,IAAMG,IAAOH,UAKPI,KAAOC,QAAQC,IAAIC,MAAQ,IAHjCP,SAAQQ,QAARH,QAAAC,IAA4BG,UAAA,CAOxBC,iBAAiB,EACjBC,oBAAoB,IALxBC,KAAMR,WAAAA,OAAOC,QAAQC,IAAIC,uBAHzBP,MAWO,SAAAa,GAAG,OAAIC,QAAQC,IAAI,4BAA6BF,KAHnDF,IAAAA,cAAoB,IAAAV,SAAAe,OAAA,CAEvBJ,KAAK,CAAAK,KAAAC,OAAAC,UAAA,GAAAC,UAAMN,CAAQC,KAAIM,KAAAC,QAAAD,KAAlBE,OAGNC,QAAAvB,SAAAwB,MAAA,UAAAC,eAEIC,IAAAA,IAAM5B,QAAA6B,QAAEX,IAAAA,IAAIf,QACZkB,IAAAA,KAAW,IAAAjB,KAAA0B,SAAA,CAAAC,IAAAzB,QAAAC,IAAAyB,eAAEd,cAAFe,KAAAC,SAAAC,IAAA,QAF2BC,cAA1CC,UAAA,UAAA,SAAAC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAKMnB,EAAmBC,IAAAA,QAAM,CAAAE,KAAWD,EAAAA,KAE1CC,OAPAc,EAAAE,KAAA,EAAAJ,mBAAAK,MAkBUN,EAAWO,QAlBrB,KAAA,EAQIC,QAAI/C,IAAQ6B,uBAAhBS,EAAAU,KAAApB,MARA,KAAA,EAAA,IAAA,MAAA,OAAAc,EAAAO,YAYiClB,IAAAA,IAAKzB,YAAY0B,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MACvBE,QAAagB,OAYMC,KAV9C,CAAA9B,WAAA,KAHkDW,KAAAA,EAC5CI,EAD4CJ,EAAAA,KAc1CoB,EAAIvB,KAAKwB,GAdiCrB,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAIfoB,EAAAE,OAAA,KAAAzB,KAAA,CAAA0B,MAAA,6BAJevB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAKxCO,IAAAA,IAAAA,QAAAA,OAAa,WADYiB,OAAAC,QAAAC","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Ably = require('ably');\r\nconst cors = require('cors');\r\nrequire('dotenv').config(); // To load environment variables from .env file\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// MongoDB connection using environment variable\r\nmongoose.connect(process.env.MONGO_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n})\r\n.then(() => console.log('MongoDB connected'))\r\n.catch(err => console.log('MongoDB connection error:', err));\r\n\r\n// MongoDB Message Model\r\nconst messageSchema = new mongoose.Schema({\r\n    text: { type: String, required: true },\r\n    timestamp: { type: Date, default: Date.now }\r\n});\r\n\r\nconst Message = mongoose.model('Message', messageSchema);\r\n\r\n// Use middleware\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Initialize Ably with API Key from environment variable\r\nconst ably = new Ably.Realtime({ key: process.env.ABLY_API_KEY });\r\nconst publicChannel = ably.channels.get('chat');\r\n\r\n// Listen for new messages on the public chat and save them to MongoDB\r\npublicChannel.subscribe('message', async (message) => {\r\n    const newMessage = new Message({ text: message.data.text });\r\n    await newMessage.save();\r\n    console.log('Message saved to DB:', message.data.text);\r\n});\r\n\r\n// API to get all messages from the MongoDB database\r\napp.get('/messages', async (req, res) => {\r\n    try {\r\n        const messages = await Message.find().sort({ timestamp: -1 });\r\n        res.json(messages);\r\n    } catch (err) {\r\n        res.status(500).json({ error: 'Failed to fetch messages' });\r\n    }\r\n});\r\n\r\n// Serve static files (HTML, JS, etc.) - if you have them in a public folder\r\napp.use(express.static('public'));\r\n\r\n// Vercel Serverless Function (For deployment on Vercel)\r\nmodule.exports = app;\r\n"]}